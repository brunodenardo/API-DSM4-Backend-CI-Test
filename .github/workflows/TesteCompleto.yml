
name: Teste Completo

on: 
  pull_request: 
    branches:
      - release


jobs:
    TesteUnitario:
        runs-on: ubuntu-latest

        container:
          image: pedrohsalmeida/nimbus-backend:latest
          options: --entrypoint /bin/sh # Usa '/bin/sh' para garantir que os comandos 'run' funcionem
          env:
            PORT: ${{ secrets.PORT }}
            JWT_SECRET: ${{ secrets.JWT_SECRET }}
            DB_URL_MONGO_BACK: ${{ secrets.DB_URL_MONGO_BACK }}



        steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Instalando dempendencias
          run: npm install


        - name: rodando testes
          id: test
          run: npm run test:unit

        - name: Configurar Docker para autenticação
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_TOKEN }}
        
        - name: Construir a imagem Docker
          run: |
            # Usando o número do pull request como parte da tag
            docker build -t pedrohsalmeida/nimbus-backend:testeintegracao
            docker tag pedrohsalmeida/nimbus-backend:testeintegracao
    
    
        - name: Push da imagem para o Docker Hub
          run: |
            docker push pedrohsalmeida/nimbus-backend:testeintegracao



    TesteIntegracao:
      needs: TesteUnitario
      runs-on: ubuntu-latest

      services:
        db:
          image: postgres
          env:
            POSTGRES_USER: ${{secrets.POSTGRES_USER}}
            POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
            POSTGRES_DB: ${{ secrets.DB_NAME_TEST }}
          ports:
            - 5432:5432

        frontend:
          image: pedrohsalmeida/nimbus-frontend:Dev-latest
          ports:
            - 3000:3000

        backend:
          image: pedrohsalmeida/nimbus-backend:testeintegracao
          env:
            NODE_ENV: test
            PORT: ${{secrets.PORT}}
            JWT_SECRET: ${{secrets.JWT_SECRET}}
            DB_URL_MONGO_BACK: ${{secrets.DB_URL_MONGO_BACK}}
            DB_NAME: ${{secrets.DB_NAME}}
            DB_HOST: db
            DB_USER: ${{secrets.DB_USER}}
            DB_PORT: ${{secrets.DB_PORT}}
            DB_PASSWORD: ${{secrets.DB_PASSWORD}}
            DB_NAME_TEST: ${{secrets.DB_NAME_TEST}}
          ports:
            - 8000:8000

      steps:

        - name: Checkout code
          uses: actions/checkout@v3

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
        
        - name: Build and export Docker image
          uses: docker/build-push-action@v5
          with:
            tags: back/test
            outputs: type=docker

        - name: List Docker images
          run: | 
            docker image ls -a
            docker ps
        
        - name: Inspect frontend container
          id: inspect_frontend
          run: |
            network_name=$(docker inspect -f '{{ range .NetworkSettings.Networks }}{{ .NetworkID }} {{ end }}' ${{job.services.frontend.id}})
            echo "::set-output name=network_name::$network_name"
    
        - name: Use network name in a subsequent step
          run: |
            echo "Network name: ${{ steps.inspect_frontend.outputs.network_name }}"
    

        - name: Build e run backend container image
          run: |
            docker run --name backend   -d back/test:latest sh -c "npm run migration:run && npm run test:cypress"
            docker logs backend
            npm i cypress
            docker ps

        #--network ${{ steps.inspect_frontend.outputs.network_name }}  -e PORT=${{ secrets.PORT }} -e JWT_SECRET=dsishnidni -e DB_HOST=db -e DB_USER=${{ secrets.DB_USER }} -e DB_PORT=${{ secrets.DB_PORT }} -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} -e DB_NAME_TEST=${{ secrets.DB_NAME_TEST }}

        - name: Checkout code
          uses: actions/checkout@v3
          with:
            repository: brunodenardo/API-DSM4-Frontend-CI
            ref: develop
            path: front

        - name: passando para diretorio front
          run: |
            ls -la
            cd front
            ls -la

        
        - uses: cypress-io/github-action@v6
          with:
            browser: chrome
            project: ./front
          env:
            CYPRESS_host: http://localhost:3000

    
    AceitaRecusaPR:
      runs-on: ubuntu-latest
      needs: TesteIntegracao
      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        

        

        - name: Aprovando pull_request se os testes passarem
          uses: juliangruber/approve-pull-request-action@v2 
          with:
              github-token: ${{ secrets.ADM_TOKEN }}
              number: ${{ github.event.pull_request.number }}


        - name: Merge Pull Request
          uses: juliangruber/merge-pull-request-action@v1
          with:
            github-token: ${{ secrets.ADM_TOKEN }}
            number: ${{ github.event.pull_request.number }}
            method: squash


        - run: echo "HEAD:${{github.event.pull_request.head.repo.name}}, BASE:${{github.event.pull_request.base.repo.name}}"


    PushDokerHub:
      runs-on: ubuntu-latest


      needs: AceitaRecusaPR


      steps:
        - name: Checkout code
          uses: actions/checkout@v3


        - name: Instalar Docker Compose
          run: sudo apt-get install docker-compose


        - name: Construir Imagem Docker
          run: docker-compose build




        - name: Configurar Docker para autenticação
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_TOKEN }}


        - name: Construir a imagem Docker
          run: |
            # Usando o número do pull request como parte da tag
            docker build -t pedrohsalmeida/nimbus-backend:Rel-0.${{ github.event.number }}
            docker tag pedrohsalmeida/nimbus-backend:Rel-0.${{ github.event.number }} pedrohsalmeida/nimbus-backend:Rel-latest
    
    
        - name: Push da imagem para o Docker Hub
          run: |
            docker push pedrohsalmeida/nimbus-backend:Rel-0.${{ github.event.number }}
            docker push pedrohsalmeida/nimbus-backend:Rel-latest